require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TimeEditsController do
  before(:each) do
      @user = User.create!(:name => 'Tom', :activated => 'true', :initials => 'T')
      @period = Period.create(:start_date=>DateTime.parse("Jan 20, 2012"), :end_date=>DateTime.parse("May 20, 2012"), :name=>"Spring 2012", :visible=>true)
      @calendar = Calendar.create!(:user_id => @user.id, :name => "#{@user.name}'s calendar",:calendar_type => 1, :period_id=>@period.id)
      group = Group.find_by_name("Administrators")
      group.users << @user
      group.save!
  end

  # This should return the minimal set of attributes required to create a valid
  # TimeEdit. As you add validations to TimeEdit, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:user_id => @user.id, :calendar_id => @calendar.id, :start_time => Time.now - 2.hours, :duration=>1}
  end

  def valid_attributes_post
    {:start_time => Time.now - 2.hours, :duration => 1}
  end

  def valid_session
    {:test_user_id => @user.id}
  end

  describe "GET index" do
    it "assigns all time_edits as @time_edits" do
      time_edit = TimeEdit.create! valid_attributes
      get :index, {}, valid_session
      assigns(:time_edits).should eq([time_edit])
    end
  end

  describe "GET show" do
    it "assigns the requested time_edit as @time_edit" do
      time_edit = TimeEdit.create! valid_attributes
      get :show, {:id => time_edit.to_param}, valid_session
      assigns(:time_edit).should eq(time_edit)
    end
  end

  describe "GET new" do
    it "assigns a new time_edit as @time_edit" do
      get :new, {}, valid_session
      assigns(:time_edit).should be_a_new(TimeEdit)
    end
  end

  describe "GET edit" do
    it "assigns the requested time_edit as @time_edit" do
      time_edit = TimeEdit.create! valid_attributes
      get :edit, {:id => time_edit.to_param}, valid_session
      assigns(:time_edit).should eq(time_edit)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TimeEdit" do
        expect {
          post :create, {:time_edit => valid_attributes_post}, valid_session
        }.to change(TimeEdit, :count).by(1)
      end

      it "assigns a newly created time_edit as @time_edit" do
        post :create, {:time_edit => valid_attributes_post}, valid_session
        assigns(:time_edit).should be_a(TimeEdit)
        assigns(:time_edit).should be_persisted
      end

      it "redirects to the created time_edit" do
        post :create, {:time_edit => valid_attributes_post}, valid_session
        response.should redirect_to(time_edits_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved time_edit as @time_edit" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeEdit.any_instance.stub(:save).and_return(false)
        post :create, {:time_edit => {}}, valid_session
        assigns(:time_edit).should be_a_new(TimeEdit)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TimeEdit.any_instance.stub(:save).and_return(false)
        post :create, {:time_edit => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested time_edit" do
        time_edit = TimeEdit.create! valid_attributes
        # Assuming there are no other time_edits in the database, this
        # specifies that the TimeEdit created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TimeEdit.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => time_edit.to_param, :time_edit => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested time_edit as @time_edit" do
        time_edit = TimeEdit.create! valid_attributes
        put :update, {:id => time_edit.to_param, :time_edit => valid_attributes_post}, valid_session
        assigns(:time_edit).should eq(time_edit)
      end

      it "redirects to the time_edit" do
        time_edit = TimeEdit.create! valid_attributes
        put :update, {:id => time_edit.to_param, :time_edit => valid_attributes_post}, valid_session
        response.should redirect_to(time_edits_path)
      end
    end

    describe "with invalid params" do
      it "assigns the time_edit as @time_edit" do
        time_edit = TimeEdit.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TimeEdit.any_instance.stub(:save).and_return(false)
        put :update, {:id => time_edit.to_param, :time_edit => {}}, valid_session
        assigns(:time_edit).should eq(time_edit)
      end

      it "re-renders the 'edit' template" do
        time_edit = TimeEdit.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TimeEdit.any_instance.stub(:save).and_return(false)
        put :update, {:id => time_edit.to_param, :time_edit => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested time_edit" do
      time_edit = TimeEdit.create! valid_attributes
      expect {
        delete :destroy, {:id => time_edit.to_param}, valid_session
      }.to change(TimeEdit, :count).by(-1)
    end

    it "redirects to the time_edits list" do
      time_edit = TimeEdit.create! valid_attributes
      delete :destroy, {:id => time_edit.to_param}, valid_session
      response.should redirect_to(time_edits_url)
    end
  end

end
