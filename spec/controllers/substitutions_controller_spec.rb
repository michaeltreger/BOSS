require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SubstitutionsController do

  describe "GET new" do
    it "assigns a new substitution as @substitution" do
      substitution = mock('Substitution')
      Substitution.stub(:new).and_return(substitution)
      get :new
      assigns(:substitution).should == substitution
    end
  end

  describe "GET edit" do
    it "assigns the requested substitution as @substitution" do
      substitution = mock('Substitution')
      Substitution.stub(:find).with('1').and_return(substitution)
      get :edit, {:id => '1'}
      assigns(:substitution).should == substitution
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Substitution" do
        Substitution.should_receive(:new).with(:substitution)
        post :create, {:substitution => {'these' => 'params'}, :entry => Entry.new, :users =>[User.new, User.new]}
        assigns(:substitution).should be_a(Substitution)
      end

      it "assigns a newly created substitution as @substitution" do
        post :create, {:substitution => {'these' => 'params'}, :entry => Entry.new, :users =>[User.new, User.new]}
        assigns(:substitution).should be_a(Substitution)
      end

      it "redirects to the created substitution" do
        post :create, {:substitution => {'these' => 'params'}, :entry => Entry.new, :users =>[User.new, User.new]}
        response.should redirect_to(:substitutions)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved substitution as @substitution" do
        # Trigger the behavior that occurs when invalid params are submitted
        Substitution.any_instance.stub(:save).and_return(false)
        post :create, {:substitution => {'these' => 'params'}, :entry => Entry.new, :users =>[User.new, User.new]}
        assigns(:substitution).should be_nil
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Substitution.any_instance.stub(:save).and_return(false)
        post :create, {:substitution => {'these' => 'params'}, :entry => Entry.new, :users =>[User.new, User.new]}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested substitution" do
        substitution = mock('Substitution')
        Substitution.stub(:find).with('1').and_return(substitution)
        substitution.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => '1', :substitution => {'these' => 'params'}}
      end

      it "assigns the requested substitution as @substitution" do
        Substitution.create! valid_attributes
        put :update, {:id => '1', :substitution => {'these' => 'params'}}
        assigns(:substitution).should eq(substitution)
      end

      it "redirects to the substitution" do
        substitution = Substitution.create! valid_attributes
        put :update, {:id => substitution.to_param, :substitution => valid_attributes}
        response.should redirect_to(substitution)
      end
    end

    describe "with invalid params" do
      it "assigns the substitution as @substitution" do
        Substitution.create!(:description => 'haha',:entry =>Entry.new)
        # Trigger the behavior that occurs when invalid params are submitted
        Substitution.any_instance.stub(:save).and_return(false)
        put :update, {:id => substitution.to_param, :substitution => {:description => 'haha',:entry =>Entry.new}}
        assigns(:substitution).should eq(substitution)
      end

      it "re-renders the 'edit' template" do
        Substitution.create!(:description => 'haha',:entry =>Entry.new)
        # Trigger the behavior that occurs when invalid params are submitted
        Substitution.any_instance.stub(:save).and_return(false)
        put :update, {:id => '1', :substitution => {:description => 'haha',:entry =>Entry.new}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @substitution = Substitution.create!(:description => 'haha',:entry =>Entry.new)
    end
    it "destroys the requested substitution" do
      Substitution.should_receive(:find).with('1')
     # @substitution.should_receive(:destroy)
      delete :destroy, {:id => '1'}
      substitution = Substitution.find('1')
      assigns(:substitutions).should be_nil
    end

    it "redirects to the substitutions list" do
      delete :destroy, {:id => '1'}
      response.should redirect_to(substitutions_url)
    end
  end

end
